// SPDX-FileCopyrightText: Copyright 2024 shadPS4 Emulator Project
// SPDX-License-Identifier: GPL-2.0-or-later

#pragma once

#include <boost/container/static_vector.hpp>
#include <xbyak/xbyak.h>
#include "common/types.h"

namespace Shader::IR {
enum class Attribute : u64;
enum class ScalarReg : u32;
enum class Patch : u64;
class Inst;
class Value;
} // namespace Shader::IR

namespace Shader::Backend::X64 {
    
using Operands = boost::container::static_vector<Xbyak::Operand, 4>;
    
class EmitContext;

// Microinstruction emitters
void EmitPhi(EmitContext& ctx);
void EmitVoid(EmitContext& ctx);
void EmitIdentity(EmitContext& ctx);
void EmitConditionRef(EmitContext& ctx, const IR::Value& value);
void EmitReference(EmitContext&);
void EmitPhiMove(EmitContext&);
void EmitJoin(EmitContext& ctx);
void EmitGetScc(EmitContext& ctx);
void EmitGetExec(EmitContext& ctx);
void EmitGetVcc(EmitContext& ctx);
void EmitGetSccLo(EmitContext& ctx);
void EmitGetVccLo(EmitContext& ctx);
void EmitGetVccHi(EmitContext& ctx);
void EmitGetM0(EmitContext& ctx);
void EmitSetScc(EmitContext& ctx);
void EmitSetExec(EmitContext& ctx);
void EmitSetVcc(EmitContext& ctx);
void EmitSetSccLo(EmitContext& ctx);
void EmitSetVccLo(EmitContext& ctx);
void EmitSetVccHi(EmitContext& ctx);
void EmitSetM0(EmitContext& ctx);
void EmitFPCmpClass32(EmitContext& ctx);
void EmitPrologue(EmitContext& ctx);
void EmitEpilogue(EmitContext& ctx);
void EmitDiscard(EmitContext& ctx);
void EmitDiscardCond(EmitContext& ctx, Id condition);
void EmitDebugPrint(EmitContext& ctx, IR::Inst* inst, Id arg0, Id arg1, Id arg2, Id arg3, Id arg4);
void EmitBarrier(EmitContext& ctx);
void EmitWorkgroupMemoryBarrier(EmitContext& ctx);
void EmitDeviceMemoryBarrier(EmitContext& ctx);
void EmitGetUserData(EmitContext& ctx, const Operands& dest, IR::ScalarReg reg);
void EmitSetUserData(EmitContext& ctx, const Operands& offset, const Operands& value);
void EmitGetThreadBitScalarReg(EmitContext& ctx);
void EmitSetThreadBitScalarReg(EmitContext& ctx);
void EmitGetScalarRegister(EmitContext& ctx);
void EmitSetScalarRegister(EmitContext& ctx);
void EmitGetVectorRegister(EmitContext& ctx);
void EmitSetVectorRegister(EmitContext& ctx);
void EmitSetGotoVariable(EmitContext& ctx);
void EmitGetGotoVariable(EmitContext& ctx);
void EmitSetScc(EmitContext& ctx);
void EmitReadConst(EmitContext& ctx, const Operands& dest, const Operands& base, const Operands& offset);
void EmitReadConstBuffer(EmitContext& ctx);
void EmitLoadBufferU8(EmitContext& ctx);
void EmitLoadBufferU16(EmitContext& ctx);
void EmitLoadBufferU32(EmitContext& ctx);
void EmitLoadBufferU32x2(EmitContext& ctx);
void EmitLoadBufferU32x3(EmitContext& ctx);
void EmitLoadBufferU32x4(EmitContext& ctx);
void EmitLoadBufferF32(EmitContext& ctx);
void EmitLoadBufferF32x2(EmitContext& ctx);
void EmitLoadBufferF32x3(EmitContext& ctx);
void EmitLoadBufferF32x4(EmitContext& ctx);
void EmitLoadBufferFormatF32(EmitContext& ctx);
void EmitStoreBufferU8(EmitContext& ctx);
void EmitStoreBufferU16(EmitContext& ctx);
void EmitStoreBufferU32(EmitContext& ctx);
void EmitStoreBufferU32x2(EmitContext& ctx);
void EmitStoreBufferU32x3(EmitContext& ctx);
void EmitStoreBufferU32x4(EmitContext& ctx);
void EmitStoreBufferF32(EmitContext& ctx);
void EmitStoreBufferF32x2(EmitContext& ctx);
void EmitStoreBufferF32x3(EmitContext& ctx);
void EmitStoreBufferF32x4(EmitContext& ctx);
void EmitStoreBufferFormatF32(EmitContext& ctx);
void EmitBufferAtomicIAdd32(EmitContext& ctx);
void EmitBufferAtomicSMin32(EmitContext& ctx);
void EmitBufferAtomicUMin32(EmitContext& ctx);
void EmitBufferAtomicSMax32(EmitContext& ctx);
void EmitBufferAtomicUMax32(EmitContext& ctx);
void EmitBufferAtomicInc32(EmitContext& ctx);
void EmitBufferAtomicDec32(EmitContext& ctx);
void EmitBufferAtomicAnd32(EmitContext& ctx);
void EmitBufferAtomicOr32(EmitContext& ctx);
void EmitBufferAtomicXor32(EmitContext& ctx);
void EmitBufferAtomicSwap32(EmitContext& ctx);
Id EmitGetAttribute(EmitContext& ctx, IR::Attribute attr, u32 comp, Id index);
Id EmitGetAttributeU32(EmitContext& ctx, IR::Attribute attr, u32 comp);
void EmitSetAttribute(EmitContext& ctx, IR::Attribute attr, Id value, u32 comp);
Id EmitGetTessGenericAttribute(EmitContext& ctx, Id vertex_index, Id attr_index, Id comp_index);
void EmitSetTcsGenericAttribute(EmitContext& ctx, Id value, Id attr_index, Id comp_index);
Id EmitReadTcsGenericOuputAttribute(EmitContext& ctx, Id vertex_index, Id attr_index,
                                    Id comp_index);
Id EmitGetPatch(EmitContext& ctx, IR::Patch patch);
void EmitSetPatch(EmitContext& ctx, IR::Patch patch, Id value);
void EmitSetFragColor(EmitContext& ctx, u32 index, u32 component, Id value);
void EmitSetSampleMask(EmitContext& ctx, Id value);
void EmitSetFragDepth(EmitContext& ctx, Id value);
Id EmitWorkgroupId(EmitContext& ctx);
Id EmitLocalInvocationId(EmitContext& ctx);
Id EmitInvocationId(EmitContext& ctx);
Id EmitInvocationInfo(EmitContext& ctx);
Id EmitSampleId(EmitContext& ctx);
Id EmitUndefU1(EmitContext& ctx);
Id EmitUndefU8(EmitContext& ctx);
Id EmitUndefU16(EmitContext& ctx);
Id EmitUndefU32(EmitContext& ctx);
Id EmitUndefU64(EmitContext& ctx);
void EmitLoadSharedU32(EmitContext& ctx);
void EmitLoadSharedU64(EmitContext& ctx);
void EmitWriteSharedU32(EmitContext& ctx);
void EmitWriteSharedU64(EmitContext& ctx);
void EmitSharedAtomicIAdd32(EmitContext& ctx);
void EmitSharedAtomicUMax32(EmitContext& ctx);
void EmitSharedAtomicSMax32(EmitContext& ctx);
void EmitSharedAtomicUMin32(EmitContext& ctx);
void EmitSharedAtomicSMin32(EmitContext& ctx);
void EmitSharedAtomicAnd32(EmitContext& ctx);
void EmitSharedAtomicOr32(EmitContext& ctx);
void EmitSharedAtomicXor32(EmitContext& ctx);
void EmitCompositeConstructU32x2(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2);
void EmitCompositeConstructU32x3(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3);
void EmitCompositeConstructU32x4(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3, const Operands& src4);
void EmitCompositeConstructU32x2x2(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2);
void EmitCompositeExtractU32x2(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractU32x3(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractU32x4(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeInsertU32x2(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertU32x3(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertU32x4(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeShuffleU32x2(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2);
void EmitCompositeShuffleU32x3(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3);
void EmitCompositeShuffleU32x4(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3, u32 idx4);
void EmitCompositeConstructF16x2(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2);
void EmitCompositeConstructF16x3(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3);
void EmitCompositeConstructF16x4(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3, const Operands& src4);
void EmitCompositeExtractF16x2(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractF16x3(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractF16x4(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeInsertF16x2(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertF16x3(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertF16x4(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeShuffleF16x2(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2);
void EmitCompositeShuffleF16x3(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3);
void EmitCompositeShuffleF16x4(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3, u32 idx4);
void EmitCompositeConstructF32x2(EmitContext& ctx, const Operands& dest, const OpEmitFPAbs16erands& src1, const Operands& src2);
void EmitCompositeConstructF32x3(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3);
void EmitCompositeConstructF32x4(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3, const Operands& src4);
void EmitCompositeConstructF32x2x2(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2);
void EmitCompositeExtractF32x2(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractF32x3(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractF32x4(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeInsertF32x2(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertF32x3(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertF32x4(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeShuffleF32x2(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2);
void EmitCompositeShuffleF32x3(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3);
void EmitCompositeShuffleF32x4(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3, u32 idx4);
void EmitCompositeConstructF64x2(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2);
void EmitCompositeConstructF64x3(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3);
void EmitCompositeConstructF64x4(EmitContext& ctx, const Operands& dest, const Operands& src1, const Operands& src2, const Operands& src3, const Operands& src4);
void EmitCompositeExtractF64x2(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractF64x3(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeExtractF64x4(EmitContext& ctx, const Operands& dest, const Operands& composite, u32 index);
void EmitCompositeInsertF64x2(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertF64x3(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeInsertF64x4(EmitContext& ctx, const Operands& dest, const Operands& composite, const Operands& object, u32 index);
void EmitCompositeShuffleF64x2(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2);
void EmitCompositeShuffleF64x3(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3);
void EmitCompositeShuffleF64x4(EmitContext& ctx, const Operands& dest, const Operands& composite1, const Operands& composite2, u32 idx1, u32 idx2, u32 idx3, u32 idx4);
Id EmitSelectU1(EmitContext& ctx, Id cond, Id true_value, Id false_value);
Id EmitSelectU8(EmitContext& ctx, Id cond, Id true_value, Id false_value);
Id EmitSelectU16(EmitContext& ctx, Id cond, Id true_value, Id false_value);
Id EmitSelectU32(EmitContext& ctx, Id cond, Id true_value, Id false_value);
Id EmitSelectU64(EmitContext& ctx, Id cond, Id true_value, Id false_value);
Id EmitSelectF16(EmitContext& ctx, Id cond, Id true_value, Id false_value);
Id EmitSelectF32(EmitContext& ctx, Id cond, Id true_value, Id false_value);
Id EmitSelectF64(EmitContext& ctx, Id cond, Id true_value, Id false_value);
void EmitBitCastU16F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitBitCastU32F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitBitCastU64F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitBitCastF16U16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitBitCastF32U32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitBitCastF64U64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitPackUint2x32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitUnpackUint2x32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitPackFloat2x32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitPackUnorm2x16(EmitContext& ctx);
void EmitUnpackUnorm2x16(EmitContext& ctx);
void EmitPackSnorm2x16(EmitContext& ctx);
void EmitUnpackSnorm2x16(EmitContext& ctx);
void EmitPackUint2x16(EmitContext& ctx);
void EmitUnpackUint2x16(EmitContext& ctx);
void EmitPackSint2x16(EmitContext& ctx);
void EmitUnpackSint2x16(EmitContext& ctx);
void EmitPackHalf2x16(EmitContext& ctx);
void EmitUnpackHalf2x16(EmitContext& ctx);
void EmitPackUnorm4x8(EmitContext& ctx);
void EmitUnpackUnorm4x8(EmitContext& ctx);
void EmitPackSnorm4x8(EmitContext& ctx);
void EmitUnpackSnorm4x8(EmitContext& ctx);
void EmitPackUint4x8(EmitContext& ctx);
void EmitUnpackUint4x8(EmitContext& ctx);
void EmitPackSint4x8(EmitContext& ctx);
void EmitUnpackSint4x8(EmitContext& ctx);
void EmitPackUfloat10_11_11(EmitContext& ctx);
void EmitUnpackUfloat10_11_11(EmitContext& ctx);
void EmitPackUnorm2_10_10_10(EmitContext& ctx);
void EmitUnpackUnorm2_10_10_10(EmitContext& ctx);
void EmitPackSnorm2_10_10_10(EmitContext& ctx);
void EmitUnpackSnorm2_10_10_10(EmitContext& ctx);
void EmitPackUint2_10_10_10(EmitContext& ctx);
void EmitUnpackUint2_10_10_10(EmitContext& ctx);
void EmitPackSint2_10_10_10(EmitContext& ctx);
void EmitUnpackSint2_10_10_10(EmitContext& ctx);
void EmitFPAbs16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPAbs32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPAbs64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPAdd16(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPAdd32(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPAdd64(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPSub32(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPFma16(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2, const Operands& op3);
void EmitFPFma32(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2, const Operands& op3);
void EmitFPFma64(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2, const Operands& op3);
void EmitFPMax32(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2, bool is_legacy = false);
void EmitFPMax64(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPMin32(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2, bool is_legacy = false);
void EmitFPMin64(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPMul16(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPMul32(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPMul64(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPDiv32(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPDiv64(EmitContext& ctx, const Operands& dest, const Operands& op1, const Operands& op2);
void EmitFPNeg16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPNeg32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPNeg64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPSin(EmitContext& ctx);
void EmitFPCos(EmitContext& ctx);
void EmitFPExp2(EmitContext& ctx);
void EmitFPLdexp(EmitContext& ctx);
void EmitFPLog2(EmitContext& ctx);
void EmitFPRecip32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPRecip64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPRecipSqrt32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPRecipSqrt64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPSqrt(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPSaturate16(EmitContext& ctx);
void EmitFPSaturate32(EmitContext& ctx);
void EmitFPSaturate64(EmitContext& ctx);
void EmitFPClamp16(EmitContext& ctx, const Operands& dest, const Operands& op, const Operands& min, const Operands& max);
void EmitFPClamp32(EmitContext& ctx, const Operands& dest, const Operands& op, const Operands& min, const Operands& max);
void EmitFPClamp64(EmitContext& ctx, const Operands& dest, const Operands& op, const Operands& min, const Operands& max);
void EmitFPRoundEven16(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPRoundEven32(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPRoundEven64(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPFloor16(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPFloor32(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPFloor64(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPCeil16(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPCeil32(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPCeil64(EmitContext& ctx, const Operands& dest, const Operands& op1);
void EmitFPTrunc16(EmitContext& ctx);
void EmitFPTrunc32(EmitContext& ctx);
void EmitFPTrunc64(EmitContext& ctx);
void EmitFPFract32(EmitContext& ctx);
void EmitFPFract64(EmitContext& ctx);
void EmitFPFrexpSig32(EmitContext& ctx);
void EmitFPFrexpSig64(EmitContext& ctx);
void EmitFPFrexpExp32(EmitContext& ctx);
void EmitFPFrexpExp64(EmitContext& ctx);
void EmitFPOrdEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdNotEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdNotEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdNotEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordNotEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordNotEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordNotEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdLessThan16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdLessThan32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdLessThan64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordLessThan16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordLessThan32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordLessThan64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdGreaterThan16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdGreaterThan32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdGreaterThan64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordGreaterThan16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordGreaterThan32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordGreaterThan64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdLessThanEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdLessThanEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdLessThanEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordLessThanEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordLessThanEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordLessThanEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdGreaterThanEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdGreaterThanEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPOrdGreaterThanEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordGreaterThanEqual16(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordGreaterThanEqual32(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPUnordGreaterThanEqual64(EmitContext& ctx, const Operands& dest, const Operands& lhs, const Operands& rhs);
void EmitFPIsNan16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPIsNan32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPIsNan64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitFPIsInf32(EmitContext& ctx);
void EmitFPIsInf64(EmitContext& ctx);
Id EmitIAdd32(EmitContext& ctx, IR::Inst* inst, Id a, Id b);
Id EmitIAdd64(EmitContext& ctx, Id a, Id b);
Id EmitIAddCary32(EmitContext& ctx, Id a, Id b);
Id EmitISub32(EmitContext& ctx, Id a, Id b);
Id EmitISub64(EmitContext& ctx, Id a, Id b);
Id EmitSMulExt(EmitContext& ctx, Id a, Id b);
Id EmitUMulExt(EmitContext& ctx, Id a, Id b);
Id EmitIMul32(EmitContext& ctx, Id a, Id b);
Id EmitIMul64(EmitContext& ctx, Id a, Id b);
Id EmitSDiv32(EmitContext& ctx, Id a, Id b);
Id EmitUDiv32(EmitContext& ctx, Id a, Id b);
Id EmitSMod32(EmitContext& ctx, Id a, Id b);
Id EmitUMod32(EmitContext& ctx, Id a, Id b);
Id EmitINeg32(EmitContext& ctx, Id value);
Id EmitINeg64(EmitContext& ctx, Id value);
Id EmitIAbs32(EmitContext& ctx, Id value);
Id EmitShiftLeftLogical32(EmitContext& ctx, Id base, Id shift);
Id EmitShiftLeftLogical64(EmitContext& ctx, Id base, Id shift);
Id EmitShiftRightLogical32(EmitContext& ctx, Id base, Id shift);
Id EmitShiftRightLogical64(EmitContext& ctx, Id base, Id shift);
Id EmitShiftRightArithmetic32(EmitContext& ctx, Id base, Id shift);
Id EmitShiftRightArithmetic64(EmitContext& ctx, Id base, Id shift);
Id EmitBitwiseAnd32(EmitContext& ctx, IR::Inst* inst, Id a, Id b);
Id EmitBitwiseAnd64(EmitContext& ctx, IR::Inst* inst, Id a, Id b);
Id EmitBitwiseOr32(EmitContext& ctx, IR::Inst* inst, Id a, Id b);
Id EmitBitwiseOr64(EmitContext& ctx, IR::Inst* inst, Id a, Id b);
Id EmitBitwiseXor32(EmitContext& ctx, IR::Inst* inst, Id a, Id b);
Id EmitBitFieldInsert(EmitContext& ctx, Id base, Id insert, Id offset, Id count);
Id EmitBitFieldSExtract(EmitContext& ctx, IR::Inst* inst, Id base, Id offset, Id count);
Id EmitBitFieldUExtract(EmitContext& ctx, IR::Inst* inst, Id base, Id offset, Id count);
Id EmitBitReverse32(EmitContext& ctx, Id value);
Id EmitBitCount32(EmitContext& ctx, Id value);
Id EmitBitCount64(EmitContext& ctx, Id value);
Id EmitBitwiseNot32(EmitContext& ctx, Id value);
Id EmitFindSMsb32(EmitContext& ctx, Id value);
Id EmitFindUMsb32(EmitContext& ctx, Id value);
Id EmitFindILsb32(EmitContext& ctx, Id value);
Id EmitFindILsb64(EmitContext& ctx, Id value);
Id EmitSMin32(EmitContext& ctx, Id a, Id b);
Id EmitUMin32(EmitContext& ctx, Id a, Id b);
Id EmitSMax32(EmitContext& ctx, Id a, Id b);
Id EmitUMax32(EmitContext& ctx, Id a, Id b);
Id EmitSClamp32(EmitContext& ctx, IR::Inst* inst, Id value, Id min, Id max);
Id EmitUClamp32(EmitContext& ctx, IR::Inst* inst, Id value, Id min, Id max);
Id EmitSLessThan32(EmitContext& ctx, Id lhs, Id rhs);
Id EmitSLessThan64(EmitContext& ctx, Id lhs, Id rhs);
Id EmitULessThan32(EmitContext& ctx, Id lhs, Id rhs);
Id EmitULessThan64(EmitContext& ctx, Id lhs, Id rhs);
Id EmitIEqual32(EmitContext& ctx, Id lhs, Id rhs);
Id EmitIEqual64(EmitContext& ctx, Id lhs, Id rhs);
Id EmitSLessThanEqual(EmitContext& ctx, Id lhs, Id rhs);
Id EmitULessThanEqual(EmitContext& ctx, Id lhs, Id rhs);
Id EmitSGreaterThan(EmitContext& ctx, Id lhs, Id rhs);
Id EmitUGreaterThan(EmitContext& ctx, Id lhs, Id rhs);
Id EmitINotEqual32(EmitContext& ctx, Id lhs, Id rhs);
Id EmitINotEqual64(EmitContext& ctx, Id lhs, Id rhs);
Id EmitSGreaterThanEqual(EmitContext& ctx, Id lhs, Id rhs);
Id EmitUGreaterThanEqual(EmitContext& ctx, Id lhs, Id rhs);
Id EmitLogicalOr(EmitContext& ctx, Id a, Id b);
Id EmitLogicalAnd(EmitContext& ctx, Id a, Id b);
Id EmitLogicalXor(EmitContext& ctx, Id a, Id b);
Id EmitLogicalNot(EmitContext& ctx, Id value);
void EmitConvertS16F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS16F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS16F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS32F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS32F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS32F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS64F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS64F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertS64F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU16F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU16F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU16F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU32F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU32F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU32F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU64F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU64F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU64F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU64U32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU32U64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32F16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32F64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64F32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16S8(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16S16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16S32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16S64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16U8(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16U16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16U32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF16U64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32S8(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32S16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32S32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32S64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32U8(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32U16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32U32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF32U64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64S8(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64S16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64S32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64S64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64U8(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64U16(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64U32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertF64U64(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU16U32(EmitContext& ctx, const Operands& dest, const Operands& src);
void EmitConvertU32U16(EmitContext& ctx, const Operands& dest, const Operands& src);

void EmitImageSampleRaw(EmitContext& ctx);
void EmitImageSampleImplicitLod(EmitContext& ctx);
void EmitImageSampleExplicitLod(EmitContext& ctx);
void EmitImageSampleDrefImplicitLod(EmitContext& ctx);
void EmitImageSampleDrefExplicitLod(EmitContext& ctx);
void EmitImageGather(EmitContext& ctx);
void EmitImageGatherDref(EmitContext& ctx);
void EmitImageQueryDimensions(EmitContext& ctx);
void EmitImageQueryLod(EmitContext& ctx);
void EmitImageGradient(EmitContext& ctx);
void EmitImageRead(EmitContext& ctx);
void EmitImageWrite(EmitContext& ctx);

void EmitImageAtomicIAdd32(EmitContext& ctx);
void EmitImageAtomicSMin32(EmitContext& ctx);
void EmitImageAtomicUMin32(EmitContext& ctx);
void EmitImageAtomicSMax32(EmitContext& ctx);
void EmitImageAtomicUMax32(EmitContext& ctx);
void EmitImageAtomicInc32(EmitContext& ctx);
void EmitImageAtomicDec32(EmitContext& ctx);
void EmitImageAtomicAnd32(EmitContext& ctx);
void EmitImageAtomicOr32(EmitContext& ctx);
void EmitImageAtomicXor32(EmitContext& ctx);
void EmitImageAtomicExchange32(EmitContext& ctx);
Id EmitCubeFaceIndex(EmitContext& ctx, IR::Inst* inst, Id cube_coords);
Id EmitLaneId(EmitContext& ctx);
Id EmitWarpId(EmitContext& ctx);
Id EmitQuadShuffle(EmitContext& ctx, Id value, Id index);
Id EmitReadFirstLane(EmitContext& ctx, Id value);
Id EmitReadLane(EmitContext& ctx, Id value, u32 lane);
Id EmitWriteLane(EmitContext& ctx, Id value, Id write_value, u32 lane);
void EmitDataAppend(EmitContext& ctx);
void EmitDataConsume(EmitContext& ctx);

void EmitEmitVertex(EmitContext& ctx);
void EmitEmitPrimitive(EmitContext& ctx);

}